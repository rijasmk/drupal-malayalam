<?php

/**
 * @file
 * A module to provide a bridge between Drupal websites and PhoneGap mobile
 * applications.
 */

/**
 * Implements hook_help().
 */
function drupalgap_help($path, $arg) {
  switch ($path) {
    case 'admin/help#drupalgap':
      // Show documentation URL.
      $doc_msg = t(
        'The online <a href="@doc_url">DrupalGap Documentation</a> contains
         more information on help topics.',
        array('@doc_url' => 'http://drupal.org/node/1603690')
      );
      return "<p>$doc_msg</p>";
      break;
  }
}

/**
 * Implements hook_permission().
 */
function drupalgap_permission() {
  return array(
    'administer drupalgap' => array(
      'title' => t('Administer DrupalGap'),
      'description' => t('Perform administration tasks for DrupalGap.'),
    ),
    'drupalgap get vocabularies' => array(
      'title' => t('Get Vocabularies'),
      'description' => t('Retrieve basic data about vocabularies.'),
    ),
    'drupalgap get terms' => array(
      'title' => t('Get Terms'),
      'description' => t('Retrieve basic data about vocabularies terms.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function drupalgap_menu() {
  $items = array();
  $items['admin/config/services/drupalgap'] = array(
    'title' => 'DrupalGap',
    'type' => MENU_NORMAL_ITEM,
    'description' => 'The status of DrupalGap.',
    'page callback' => 'drupalgap_status',
    'access arguments' => array('administer drupalgap'),
    'file' => 'drupalgap.pages.inc',
  );
  return $items;
}

/**
 * Implements hook_views_api().
 */
function drupalgap_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'drupalgap'),
  );
}

/**
 * Implements hook_ctools_plugin_api().
 */
function drupalgap_ctools_plugin_api($owner, $api) {
  if ($owner == 'services' && $api == 'services') {
    return array(
      'version' => 3,
      'file' => 'drupalgap.services.inc',
    );
  }
}

/**
* Implements hook_entity_info_alter().
*/
function drupalgap_entity_info_alter(&$entity_info) {
  // Add a DrupalGap view mode to nodes and users.
  $entity_info['node']['view modes']['drupalgap'] = array(
    'label' => t('DrupalGap'),
    'custom settings' => TRUE
  );
  $entity_info['user']['view modes']['drupalgap'] = array(
    'label' => t('DrupalGap'),
    'custom settings' => TRUE
  );
}

/**
 * Implements hook_services_request_postprocess_alter().
 */
function drupalgap_services_request_postprocess_alter($controller, $args, &$result) {
  switch ($controller['callback']) {
    case '_system_resource_connect':
      // Grab the extras DG provides to system connect and append them to result.
      module_load_include('inc', 'drupalgap', 'drupalgap.resource');
      $extras = drupalgap_system_connect_extras(false);
      foreach($extras as $key => $value) {
        $result->{$key} = $value;
      }
      break;
    case '_comment_resource_retrieve':
    case '_comment_resource_index':
      // Iterate over all of the results and pull out node ids and user ids from
      // the comments.
      $nids = null;
      $uids = null;
      if ($controller['callback'] == '_comment_resource_index') {
        $nids = array();
        $uids = array();
        foreach ($result as $i => $comment) {
          if (!in_array($comment->nid, $nids)) { $nids[] = $comment->nid; }
          if (!in_array($comment->uid, $uids)) { $uids[] = $comment->uid; }
        }
      }
      else {
        // We're loading a comment, so just extract the single ids.
        $nids = $result->nid;
        $uids = $result->uid;
      }
      // On the comment retrieve resource, add the bundle to the result, it is
      // stored in the node_tye property.
      if ($controller['callback'] == '_comment_resource_retrieve') {
        $result->bundle = $result->node_type;
      }
      // If user profile pictures are enabled, add the picture uri to the
      // comment result(s).
      if (variable_get('user_pictures', 0)) {
        if ($controller['callback'] == '_comment_resource_retrieve' && $uids != 0) {
          watchdog('drupalgap', 'uid');
          $sql = "SELECT fm.uri, u.uid FROM {file_managed} fm " .
            "INNER JOIN {users} u ON u.picture = fm.fid WHERE u.uid = :uids";
          $picture = db_query($sql, array(':uids' => $uids))->fetch();
          $result->picture_uri = $picture->uri;
        }
        else if (!empty($uids)) {
          watchdog('drupalgap', 'uids');
          watchdog('drupalgap', '<pre>' . print_r($uids, true) . '</pre>');
          $sql = "SELECT fm.uri, u.uid FROM {file_managed} fm " .
            "INNER JOIN {users} u ON u.picture = fm.fid WHERE u.uid IN (:uids)";
          $pictures = db_query($sql, array(':uids' => $uids))->fetchAll();
          watchdog('drupalgap', '<pre>' . print_r($pictures, true) . '</pre>');
          foreach ($result as $i => $comment) {
            $uri = null;
            foreach($pictures as $picture) {
              if ($picture->uid == $comment->uid) {
                $uri = $picture->uri;
                break;
              }
            }
            if ($uri) { $result[$i]->picture_uri = $uri; }
          }
        }
      }
      // Let's add any custom fields to the index results.
      if ($controller['callback'] == '_comment_resource_index' && !empty($nids)) {
        // Grab a list of all the nids and their types, then build an array of
        // types keyed by their nid.
        $sql = "SELECT n.nid, n.type FROM {node} n WHERE n.nid IN (:nids)";
        $nids_and_types = db_query($sql, array(':nids' => $nids))->fetchAll();
        $types = array();
        foreach($nids_and_types as $item) {
          $types[$item->nid] = $item->type;
        }
        // Build an array of entities, keyed by the entity id, and attach the
        // bundle to each, so we can load and attach the fields to each. We need
        // to attach the node_type property to comment entities, it is equal to
        // the bundle value, or we won't be able to always load the fields
        // properly.
        $entities = array();
        foreach($result as $i => $comment) {
          $result[$i]->bundle = 'comment_node_' .  $types[$comment->nid];
          $result[$i]->node_type = $result[$i]->bundle;
          $entities[$comment->cid] = $comment;
        }
        if (!empty($entities)) { field_attach_load('comment', $entities); }
      }
      break;
    case '_node_resource_retrieve':
      
      // Grab the field info instances for this node type.
      $instances = field_info_instances('node', $result->type);
      
      // Let's add taxonomy term names along with their ids onto taxonomy term
      // reference fields.
      foreach($instances as $field => $instance) {
        if (
          $instance['widget']['module'] == 'taxonomy' ||
          (
            $instance['widget']['module'] == 'options' &&
            (
              $instance['display']['default']['module'] == 'taxonomy' ||
              $instance['display']['default']['module'] == 'i18n_taxonomy'
            )
          )
        ) {
          // Determine the field's language from the node, and fall back to
          // 'und' if the field's language isn't set.
          $language = $result->language;
          if (!isset($result->{$field}[$language])) { $language = 'und'; }
          // Extract the term ids.
          $tids = array();
          if (isset($result->{$field}[$language])) {
            foreach($result->{$field}[$language] as $delta => $term) {
              $tids[] = $term['tid'];
            }
          }
          if (empty($tids)) { continue; }
          // Grab the term names.
          $sql = "SELECT t.tid, t.name FROM {taxonomy_term_data} t WHERE t.tid IN (:tids)";
          $terms = db_query($sql, array(':tids' => $tids))->fetchAll();
          if (empty($terms)) { continue; }
          foreach($result->{$field}[$language] as $delta => $term) {
            foreach($terms as $_term) {
              if ($term['tid'] == $_term->tid) {
                $result->{$field}[$language][$delta]['name'] = $_term->name;
                break;
              }
            }
          }
        }
      }
      
      break;
  }
}

/**
 *
 */
function drupalgap_system_connect_extras($system_connect_call = true) {
  
  global $user;
  
  $results = array();
  
  if ($system_connect_call) {
    // Make a call to the system connect resource.
    module_load_include('inc', 'services', 'resources/system_resource');
    $results['system_connect'] = _system_resource_connect();
  }
  
  // Grab the ip address.
  $results['remote_addr'] = $_SERVER['REMOTE_ADDR'];
  
  // Grab the date formats and types.
  $results['date_formats'] = system_get_date_formats();
  $results['date_types'] = system_get_date_types();
  // For each date type, look in the variable table to find its format. Not all
  // types will have a format.
  foreach ($results['date_types'] as $name => $type) {
    $value = variable_get('date_format_' . $name, false);
    if ($value) {
      $results['date_types'][$name]['format'] = $value;
    }
  }
  
  // Make calls to various DrupalGap resources.
  $results['site_settings'] = _drupalgap_resource_system_site_settings();
  $results['user_permissions'] = _drupalgap_resource_user_permissions(array('uid' => $user->uid));
  $results['content_types_list'] = _drupalgap_resource_content_types_list();
  $results['content_types_user_permissions'] = _drupalgap_resource_content_types_user_permissions();
  $results['entity_info'] = entity_get_info();
  $results['field_info_instances']['node'] = field_info_instances('node');
  $results['field_info_instances']['comment'] = field_info_instances('comment');
  $results['field_info_instances']['taxonomy_vocabulary'] = field_info_instances('taxonomy_vocabulary');
  $results['field_info_instances']['taxonomy_term'] = field_info_instances('taxonomy_term');
  $results['field_info_instances']['user'] = field_info_instances('user');
  $results['field_info_fields'] = field_info_fields();
  $results['field_info_extra_fields'] = array();
  foreach($results['content_types_list'] as $content_type) {
    $results['field_info_extra_fields'][$content_type->type] =
      field_info_extra_fields('node', $content_type->type, 'form');
  }
  $results['taxonomy_vocabularies'] = _drupalgap_taxonomy_get_vocabularies();
  return $results;
}

/**
 * Implements hook_preprocess_views_views_json_style_simple().
 */
function drupalgap_preprocess_views_views_json_style_simple(&$vars) {
  // Place various view object properties and pager data onto the results.
  global $pager_total, $pager_page_array, $pager_total_items, $pager_limits;
  $view = array(
    'name' => $vars['view']->name,
    'display' => $vars['view']->current_display,
    'path' => implode('/', arg()),
    'root' => $vars['options']['root_object'],
    'child' => $vars['options']['top_child_object'],
    'pages' => $pager_total[0],
    'page' => $pager_page_array[0],
    'count' => intval($pager_total_items[0]),
    'limit' => intval($pager_limits[0]),
    //'vars' => $vars // Uncomment this to see all the vars as JSON, and have a
                      // huge performance penalty.
  );
  // If there were no pages, adjust the property values accordingly.
  if ($view['pages'] == null) {
    $view['count'] = sizeof($vars['rows'][$view['root']]);
    $view['limit'] = null;
  }
  // If there are any exposed filters, attach them to the view object.
  if (isset($vars['view']->exposed_data)) {
    $view['exposed_data'] = $vars['view']->exposed_data;
    $view['exposed_raw_input'] = $vars['view']->exposed_raw_input;
    $view['filter'] = array();
    foreach ($vars['view']->filter as $field => $filter) {
      if ($filter->options['exposed']) {
        // The entire field is huge in size and complexity, so let's trim it
        // down to the bare necessities.
        // @TODO - as the Views Exposed Filters feature evolves, revisit this
        // from time to time to see if we need to drop anything else. Anything
        // to help slim the amount of JSON is a good thing.
        $view['filter'][$field] = array(
          //'accept_null' => $filter->accept_null,
          //'always_multiple' => $filter->always_multiple,
          //'always_required' => $filter->always_required,
          'definition' => $filter->definition,
          //'field' => $filter->field,
          //'group_info' => $filter->group_info,
          //'localization_keys' => $filter->localization_keys, 
          //'no_operator' => $filter->no_operator,
          //'operator' => $filter->operator,
          'options' => $filter->options,
          //'position' => $filter->position,
          //'real_field' => $filter->real_field,
          //'relationship' => $filter->relationship,
          'value' => $filter->value,
          'value_options' => $filter->value_options,
          //'value_value' => $filter->value_value
        );
      }
    }
  }
  // Attach the view data to the rows result.
  $vars['rows']['view'] = $view;
}

/**
 * Implements hook_default_services_endpoint().
 */
function drupalgap_default_services_endpoint() {
  $endpoints = array();
  
  $endpoint = new stdClass();
  $endpoint->disabled = FALSE; /* Edit this to true to make a default endpoint disabled initially */
  $endpoint->api_version = 3;
  $endpoint->name = 'drupalgap';
  $endpoint->server = 'rest_server';
  $endpoint->path = 'drupalgap';
  $endpoint->authentication = array(
    'services' => 'services',
  );
  $endpoint->server_settings = array(
    'formatters' => array(
      'json' => TRUE,
      'bencode' => FALSE,
      'jsonp' => FALSE,
      'php' => FALSE,
      'rss' => FALSE,
      'xml' => FALSE,
    ),
    'parsers' => array(
      'application/json' => TRUE,
      'application/x-www-form-urlencoded' => TRUE,
      'application/xml' => TRUE,
      'multipart/form-data' => TRUE,
      'application/vnd.php.serialized' => FALSE,
      'text/xml' => FALSE,
    ),
  );
  $endpoint->resources = array(
    'drupalgap_content' => array(
      'actions' => array(
        'content_types_list' => array(
          'enabled' => '1',
        ),
        'content_types_user_permissions' => array(
          'enabled' => '1',
        ),
      ),
    ),
    'drupalgap_system' => array(
      'actions' => array(
        'site_settings' => array(
          'enabled' => '1',
        ),
        'connect' => array(
          'enabled' => '1',
        ),
      ),
    ),
    'drupalgap_taxonomy' => array(
      'actions' => array(
        'get_vocabularies' => array(
          'enabled' => '1',
        ),
        'get_terms' => array(
          'enabled' => '1',
        ),
      ),
    ),
    'drupalgap_user' => array(
      'actions' => array(
        'access' => array(
          'enabled' => '1',
        ),
        'login' => array(
          'enabled' => '1',
        ),
        'logout' => array(
          'enabled' => '1',
        ),
        'register' => array(
          'enabled' => '1',
        ),
        'roles_and_permissions' => array(
          'enabled' => '1',
        ),
        'permissions' => array(
          'enabled' => '1',
        ),
      ),
    ),
    'comment' => array(
      'operations' => array(
        'create' => array(
          'enabled' => '1',
        ),
        'retrieve' => array(
          'enabled' => '1',
        ),
        'update' => array(
          'enabled' => '1',
        ),
        'delete' => array(
          'enabled' => '1',
        ),
        'index' => array(
          'enabled' => '1',
        ),
      ),
      'actions' => array(
        'countAll' => array(
          'enabled' => '1',
        ),
      ),
    ),
    'file' => array(
      'operations' => array(
        'create' => array(
          'enabled' => '1',
        ),
        'retrieve' => array(
          'enabled' => '1',
        ),
        'delete' => array(
          'enabled' => '1',
        ),
        'index' => array(
          'enabled' => '1',
        ),
      ),
    ),
    'node' => array(
      'operations' => array(
        'retrieve' => array(
          'enabled' => '1',
        ),
        'create' => array(
          'enabled' => '1',
        ),
        'update' => array(
          'enabled' => '1',
        ),
        'delete' => array(
          'enabled' => '1',
        ),
        'index' => array(
          'enabled' => '1',
        ),
      ),
    ),
    'system' => array(
      'actions' => array(
        'connect' => array(
          'enabled' => '1',
        ),
        'get_variable' => array(
          'enabled' => '1',
        ),
        'set_variable' => array(
          'enabled' => '1',
        ),
        'del_variable' => array(
          'enabled' => '1',
        ),
      ),
    ),
    'taxonomy_term' => array(
      'operations' => array(
        'retrieve' => array(
          'enabled' => '1',
        ),
        'create' => array(
          'enabled' => '1',
        ),
        'update' => array(
          'enabled' => '1',
        ),
        'delete' => array(
          'enabled' => '1',
        ),
        'index' => array(
          'enabled' => '1',
        ),
      ),
      'actions' => array(
        'selectNodes' => array(
          'enabled' => '1',
        ),
      ),
    ),
    'taxonomy_vocabulary' => array(
      'operations' => array(
        'retrieve' => array(
          'enabled' => '1',
        ),
        'create' => array(
          'enabled' => '1',
        ),
        'update' => array(
          'enabled' => '1',
        ),
        'delete' => array(
          'enabled' => '1',
        ),
        'index' => array(
          'enabled' => '1',
        ),
      ),
      'actions' => array(
        'getTree' => array(
          'enabled' => '1',
        ),
      ),
    ),
    'user' => array(
      'operations' => array(
        'retrieve' => array(
          'enabled' => '1',
        ),
        'create' => array(
          'enabled' => '1',
        ),
        'update' => array(
          'enabled' => '1',
        ),
        'delete' => array(
          'enabled' => '1',
        ),
        'index' => array(
          'enabled' => '1',
        ),
      ),
      'actions' => array(
        'login' => array(
          'enabled' => '1',
          'settings' => array(
            'services' => array(
              'resource_api_version' => '1.0',
            ),
          ),
        ),
        'logout' => array(
          'enabled' => '1',
          'settings' => array(
            'services' => array(
              'resource_api_version' => '1.0',
            ),
          ),
        ),
        'register' => array(
          'enabled' => '1',
        ),
      ),
    ),
  );
  $endpoint->debug = 0;

  $endpoints[] = $endpoint;

  return $endpoints;
}

