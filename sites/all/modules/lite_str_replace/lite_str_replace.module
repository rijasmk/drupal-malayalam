<?php
/**
 * Implements hook_permission().
 */
function lite_str_replace_permission() {
  return array(
    'administer str-replace settings' => array(
      'title' => t('Bulk String replace in whole DB'),
      'description' => t('Permission to use the module \'Lite String Replace\'')
    )
  );
}

/**
 * Implementation of hook_help().
 */
function lite_str_replace_help($path, $args) {
  if ($path == 'admin/help#lite_str_replace') {
    return t('<b>Lite String Replace</b><br />A small light module to replace string in entire databse.<br />
    <br />
    Usefull while migrating to new server or migrating from Developement to Production.
    ');
  }
}

/**
 * Implementation of hook_menu().
 */
function lite_str_replace_menu() {
  $items = array();
  
  $items['admin/config/replace-filepath'] = array(
    'title' => 'Lite String Replace',
    'description' => 'A small light module to replace string in entire databse.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('lite_str_replace_form'),
    'access arguments' => array('administer site configuration'),
  );
  
  return $items;
}


/**
 *Display feedback form at the front
 */ 
function lite_str_replace_form($form, &$form_state) {
 $form['old_string'] = array(
    '#type' => 'textfield',
    '#title' => t('Old String'),
    '#size' => 30,
    '#maxlength' => 256,
    '#required' => TRUE,
    //'#value' => conf_path(TRUE, TRUE).'/files',
    '#description' => (t('Old string to be replaced.')),
  );
  
  $form['new_string'] = array(
    '#type' => 'textfield',
    '#title' => t('New String'),
    '#size' => 30,
    '#maxlength' => 256,
    //'#required' => TRUE,
    '#description' => (t('New string to replace.')),
  );
  
  $form['submit_button'] = array(
    '#type' => 'submit',
    '#value' => t('Start')
  );
 
  return $form;
}

/**
 *Front end feedback form validation before submit
 */ 
function lite_str_replace_form_validate($form, &$form_state) {
  if (!isset($form_state['values']['old_string'])) {
    form_set_error('old_string', t('Old string cannot be blank.'));
  }
  /*if (!isset($form_state['values']['new_string'])) {
    form_set_error('new_string', t('New path cannot be blank.'));
  }*/
}

/**
 *Submit handler for front end feedback form
 */
function lite_str_replace_form_submit($form, &$form_state) {
        
    $table_map = _lite_str_replace_get_all_tables_map();
    $old_str = $form_state['values']['old_string'];
    $new_str = $form_state['values']['new_string'];
    sort($table_map);
    $key = "";
    $queries = NULL;
    foreach ($table_map as $item) {
      $key .= 'FIELD: ' . $item['field'] . ' TABLE: ' . $item['table'] . ' NTYPE: ' . $item['type'].'<br />';
      $queries[] = db_query("UPDATE {".$item['table']."} SET ".$item['field']." = REPLACE(".$item['field'].", '".$old_str."', '".$new_str."')");
           
      /*$queries[] = db_update($item['table'])
            //->expression($item['field'], 'replace('.$item['field'].', "'.$form_state['values']['old_string'].'", "'.$form_state['values']['new_string'].'")')
            ->addExpression('REPLACE('.$item['field'].', "'.$old_str.'", "'.$new_str.'")')
            ->execute();  */
    }
    //_lite_str_replace_dbg($queries, TRUE);
    drupal_flush_all_caches();
    drupal_set_message(t('\''.$old_str.'\' is replaced with \''.$new_str.'\''));
}

/*
  NON HOOKS
*/
function _lite_str_replace_get_all_tables_map() { 
  $tables_map = NULL;                               
  $tables = drupal_get_schema(NULL,TRUE);
  foreach($tables as $i => $table){
    foreach($table['fields'] as $field => $field_attribs){
      if($field_attribs['type'] == 'varchar' || $field_attribs['type'] == 'text'){
        $tables_map[] = array(
            'type' => $field_attribs['type'],
            'field' => $field,
            'table' => $table['name'],
          );
      }
    }
  } 
  return $tables_map;
}

/**
 * Attempt to stretch the amount of time available for processing so
 * that timeouts don't interrupt search and replace actions.
 *
 * This only works in hosting environments where changing PHP and
 * Apache settings on the fly is allowed.
 */
function _lite_str_replace_change_env($setting, $value, $verbose) {
  $old_value = ini_get($setting); 
  if ($old_value != $value && $old_value != 0) {
    if (ini_set($setting, $value)) {
      if ($verbose) {
        drupal_set_message(t('%setting changed from %old_value to %value.', array('%setting' => $setting, '%old_value' => $old_value, '%value' => $value)));
      }
      return TRUE;
    }
    else {
      if ($verbose) {
        drupal_set_message(t('%setting could not be changed from %old_value to %value.', array('%setting' => $setting, '%old_value' => $old_value, '%value' => $value)), 'error');
      }
      return FALSE;
    }
  }
}

/**
 *To Debug the array value. Only for developers
 *I like to see things through print_r rather dpm or dsm 
 */ 
function _lite_str_replace_dbg($arr_val, $exit = FALSE)
{
  echo '<pre>';
  print_r($arr_val);
  echo '</pre>';
  if($exit)
    exit;
  return;
}